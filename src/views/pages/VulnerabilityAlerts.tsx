import {
  defineComponent,
  onMounted,
  reactive,
  watch,
  computed,
  getCurrentInstance
} from '@vue/composition-api'
import { useQuery } from '@vue/apollo-composable'
import gql from 'graphql-tag'
import { __sync } from 'babel-plugin-vue-jsx-modifier/lib/modifiers'
import { IRepositoryList, IVulnerability } from '@/src/interface'

export const VulnerabilityAlerts = defineComponent({
  setup(_) {
    const root = (getCurrentInstance()?.root as unknown) as any

    const state = reactive({
      loading: false,
      mounted: false,
      windowSize: {} as any,
      publicOnly: false
    })

    const tableRepositoryList = reactive({
      allRepositoryList: [] as any,
      options: {} as any,
      headers: [
        {
          text: 'Repository',
          align: 'start',
          sortable: false,
          value: 'name'
        },
        {
          text: 'Privacy',
          value: 'isPrivate',
          sortable: false
        },
        {
          text: 'Vulnerability Alerts',
          value: 'vulnerabilityAlerts',
          sortable: false
        }
      ],
      totalCount: 0,
      lastPage: 1,
      pageInfo: {
        endCursor: null,
        startCursor: null
      }
    })

    const dialog = reactive({
      vulnerabilitySelected: {} as any,
      vulnerabilityLoaded: [] as any,
      dialog: false
    })

    const dialogConfigComputed = computed(() => {
      return {
        dialogConfig: {
          dialog: dialog.dialog,
          title: dialog.vulnerabilitySelected.name,
          subtitle: '',
          eventClose: 'eventClose',
          actions: [
            {
              color: 'blue white--text',
              event: 'eventClose',
              name: 'Close'
            }
          ]
        } as ConfigDialog
      }
    })

    const repositoryList = useQuery(
      gql`
        query repositoryOwner(
          $login: String!
          $first: Int
          $last: Int
          $after: String
          $before: String
          $privacy: RepositoryPrivacy
        ) {
          repositoryOwner(login: $login) {
            repositories(
              first: $first
              last: $last
              after: $after
              before: $before
              orderBy: { field: UPDATED_AT, direction: DESC }
              privacy: $privacy
            ) {
              totalCount
              pageInfo {
                endCursor
                startCursor
              }
              edges {
                node {
                  name
                  isPrivate
                  updatedAt
                  vulnerabilityAlerts(first: 1) {
                    edges {
                      node {
                        id
                      }
                    }
                  }
                }
              }
            }
          }
        }
      `,
      {
        login: '' as any,
        first: 15,
        last: null,
        after: null,
        before: null,
        privacy: null as null | string
      }
    )

    const allVunerabilityAlerts = useQuery(
      gql`
        query repositoryOwner(
          $login: String!
          $name: String!
          $first: Int
          $last: Int
          $after: String
          $before: String
        ) {
          repositoryOwner(login: $login) {
            repository(name: $name) {
              vulnerabilityAlerts(
                first: $first
                last: $last
                after: $after
                before: $before
              ) {
                totalCount
                pageInfo {
                  endCursor
                  startCursor
                }
                edges {
                  node {
                    id
                    securityVulnerability {
                      advisory {
                        id
                        description
                      }
                    }
                    securityAdvisory {
                      id
                      description
                      origin
                      identifiers {
                        type
                        value
                      }
                      permalink
                      publishedAt
                      summary
                      severity
                    }
                  }
                }
              }
            }
          }
        }
      `,
      {
        login: '' as any,
        name: '' as any,
        first: 15,
        last: null,
        after: null,
        before: null
      }
    )

    watch(
      () => tableRepositoryList.options,
      async () => {
        if (state.mounted) {
          await loadRepositoryList()
        }
      }
    )

    watch(
      () => state.publicOnly,
      async () => {
        if (state.mounted) {
          await loadRepositoryList()
        }
      }
    )

    onMounted(async () => {
      root.$nextTick(async () => {
        if (root.cProfile.login === undefined) {
          root.$router.push('/login')
        }
        await loadRepositoryList()
      })
    })

    /**
     * Load Respository List
     *
     */
    async function loadRepositoryList() {
      state.loading = true
      root.cLoading.on()
      try {
        const { data } = await repositoryList.refetch({
          login: root.cProfile.login,
          first:
            tableRepositoryList.options.page > tableRepositoryList.lastPage ||
            tableRepositoryList.options.page === tableRepositoryList.lastPage
              ? tableRepositoryList.options.itemsPerPage
                ? tableRepositoryList.options.itemsPerPage
                : 10
              : null,
          last:
            tableRepositoryList.options.page < tableRepositoryList.lastPage
              ? tableRepositoryList.options.itemsPerPage
                ? tableRepositoryList.options.itemsPerPage
                : 10
              : null,
          after:
            tableRepositoryList.options.page > tableRepositoryList.lastPage
              ? tableRepositoryList.pageInfo.endCursor
              : null,
          before:
            tableRepositoryList.options.page < tableRepositoryList.lastPage
              ? tableRepositoryList.pageInfo.startCursor
              : null,
          privacy: state.publicOnly ? 'PUBLIC' : 'PRIVATE'
        })

        mapDataResultRepositoriesList(data.repositoryOwner.repositories)
        state.loading = false
        root.cLoading.off()
        state.mounted = true
      } catch (error) {
        state.loading = false
        root.cLoading.off()
        root.notify(error.message, 'red', 8)
      }
    }

    /**
     * Load Vulnerabilities
     *
     * @returns {Promise<void>}
     */
    async function loadVulnerabilities(): Promise<void> {
      state.loading = true
      root.cLoading.on()
      try {
        const { data } = await allVunerabilityAlerts.refetch({
          name: dialog.vulnerabilitySelected.name,
          login: root.cProfile.login,
          first:
            tableRepositoryList.options.page > tableRepositoryList.lastPage ||
            tableRepositoryList.options.page === tableRepositoryList.lastPage
              ? tableRepositoryList.options.itemsPerPage
                ? tableRepositoryList.options.itemsPerPage
                : 10
              : null,
          last:
            tableRepositoryList.options.page < tableRepositoryList.lastPage
              ? tableRepositoryList.options.itemsPerPage
                ? tableRepositoryList.options.itemsPerPage
                : 10
              : null,
          after:
            tableRepositoryList.options.page > tableRepositoryList.lastPage
              ? tableRepositoryList.pageInfo.endCursor
              : null,
          before:
            tableRepositoryList.options.page < tableRepositoryList.lastPage
              ? tableRepositoryList.pageInfo.startCursor
              : null
        })

        mapDataResultVulnerabilities(
          data.repositoryOwner.repository.vulnerabilityAlerts
        )
        console.log(data.repositoryOwner.repository.vulnerabilityAlerts)
        state.loading = false
        root.cLoading.off()
      } catch (error) {
        state.loading = false
        root.cLoading.off()
        root.notify(error.message, 'red', 8)
      }
    }

    /**
     * Mapping Result Vulnerabilities List
     *
     * @param {IVulnerability} data
     */
    function mapDataResultVulnerabilities(data: IVulnerability): void {
      dialog.vulnerabilityLoaded = []
      data.edges.forEach((e) => {
        dialog.vulnerabilityLoaded.push({
          ...e.node.securityAdvisory
        })
      })
    }

    /**
     * Mapping Result Repositories List
     *
     * @param {IRepositoryList} data
     */
    function mapDataResultRepositoriesList(data: IRepositoryList): void {
      tableRepositoryList.allRepositoryList = []
      data.edges.forEach((e) => {
        tableRepositoryList.allRepositoryList.push({
          ...e.node,
          vulnerabilityAlerts: e.node.vulnerabilityAlerts.edges.length > 0
        })
      })
      tableRepositoryList.totalCount = data.totalCount
      tableRepositoryList.pageInfo = (data.pageInfo as unknown) as any
      tableRepositoryList.lastPage = tableRepositoryList.options.page
    }

    function onResize() {
      state.windowSize = { x: window.innerWidth, y: window.innerHeight }
    }

    return () => {
      return (
        <div height={'100%'} class={'mx-2'}>
          <dialogComponent
            config={dialogConfigComputed.value.dialogConfig}
            onEventClose={() => {
              dialog.dialog = false
            }}
          >
            <template slot={'section'}>
              {dialog.vulnerabilityLoaded.map((e, i) => {
                return (
                  <v-card class={'ma-2'}>
                    <v-row class={'pa-0 ma-0'}>
                      <v-col class={'ma-0 pa-1'} md={6} sm={12}>
                        <v-card-title>
                          <v-badge color={'blue'} content={i + 1}>
                            Summary{' '}
                          </v-badge>
                        </v-card-title>
                        <v-card-subtitle>{e.summary}</v-card-subtitle>
                      </v-col>

                      <v-col class={'ma-0 pa-1'} md={6} sm={12}>
                        <v-card-title>
                          Severity{' '}
                          <v-icon class={'ma-2'} color={'red'}>
                            fas fa-exclamation-triangle
                          </v-icon>
                        </v-card-title>
                        <v-card-subtitle>{e.severity}</v-card-subtitle>
                      </v-col>

                      <v-col class={'ma-0 pa-1'} cols={12}>
                        <v-card-title>Description </v-card-title>
                        <v-card-subtitle>{e.description}</v-card-subtitle>
                      </v-col>
                    </v-row>
                  </v-card>
                )
              })}
            </template>
          </dialogComponent>

          <v-row justify={'end'} align={'end'} class={'mx-0'}>
            <v-col justify={'center'} align={'start'}>
              <h2 class={'ma-2'}>Vulnerability Alerts</h2>
            </v-col>
            <v-col cols={'12'} sm={'2'} md={'2'}>
              <v-checkbox
                v-model={state.publicOnly}
                label={'Public Only'}
                color={'blue'}
              ></v-checkbox>
            </v-col>
          </v-row>

          <v-data-table
            fixed-header={true}
            height={state.windowSize.y - 230}
            v-resize={onResize}
            class={'ma-auto elevation-1'}
            headers={tableRepositoryList.headers}
            {...{
              on: {
                'click:row': async (item) => {
                  if (item.vulnerabilityAlerts) {
                    dialog.vulnerabilitySelected = item
                    await loadVulnerabilities()

                    dialog.dialog = true
                  } else {
                    root.notify(
                      'this repository has no vulnerability listed',
                      'orange',
                      4
                    )
                  }
                }
              }
            }}
            items={tableRepositoryList.allRepositoryList}
            options={__sync(tableRepositoryList.options)}
            itemsPerPage={10}
            serverItemsLength={tableRepositoryList.totalCount}
            loading={state.loading}
            footer-props={{ 'items-per-page-options': [15] }}
            scopedSlots={{
              'item.isPrivate': ({ item }) => {
                if (item.isPrivate) {
                  return (
                    <v-icon large color={'red'}>
                      fas fa-lock
                    </v-icon>
                  )
                } else {
                  return (
                    <v-icon large color={'green'}>
                      fas fa-lock-open
                    </v-icon>
                  )
                }
              },
              'item.vulnerabilityAlerts': ({ item }) => {
                if (item.vulnerabilityAlerts) {
                  return (
                    <v-icon large color={'red'}>
                      fas fa-exclamation
                    </v-icon>
                  )
                } else {
                  return (
                    <v-icon large color={'green'}>
                      fas fa-thumbs-up
                    </v-icon>
                  )
                }
              }
            }}
          ></v-data-table>
        </div>
      )
    }
  }
})
