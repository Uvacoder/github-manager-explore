import {
  defineComponent,
  onMounted,
  reactive,
  watch,
  computed
} from '@vue/composition-api'
import { useQuery } from '@vue/apollo-composable'
import gql from 'graphql-tag'
import { __sync } from 'babel-plugin-vue-jsx-modifier/lib/modifiers'

export const VulnerabilityAlerts = defineComponent({
  setup(_, { root }) {
    const state = reactive({
      loading: false,
      mounted: false
    })

    const table = reactive({
      allVunerabilityAlerts: [] as any,
      options: {} as any,
      headers: [
        {
          text: 'Repository',
          align: 'start',
          sortable: false,
          value: 'name'
        },
        {
          text: 'Privacy',
          value: 'isPrivate',
          sortable: false
        },
        {
          text: 'Vulnerability Alerts',
          value: 'vulnerabilityAlerts',
          sortable: false
        }
      ],
      totalCount: 0,
      lastPage: 1,
      pageInfo: {
        endCursor: null,
        startCursor: null
      }
    })

    const dialog = reactive({
      vulnerabilitySelected: {} as any,
      dialog: false
    })

    const dialogConfigComputed = computed(() => {
      return {
        dialogConfig: {
          dialog: dialog.dialog,
          title: dialog.vulnerabilitySelected.name,
          subtitle: '',
          eventClose: 'eventClose',
          actions: [
            {
              color: 'blue text--white',
              event: 'eventClose',
              name: 'Close'
            }
          ]
        } as ConfigDialog
      }
    })

    const vulnerabilityAlerts = useQuery(
      gql`
        query repositoryOwner(
          $login: String!
          $first: Int
          $last: Int
          $after: String
          $before: String
        ) {
          repositoryOwner(login: $login) {
            repositories(
              first: $first
              last: $last
              after: $after
              before: $before
              orderBy: { field: UPDATED_AT, direction: DESC }
            ) {
              totalCount
              pageInfo {
                endCursor
                startCursor
              }
              edges {
                node {
                  name
                  isPrivate
                  updatedAt
                  vulnerabilityAlerts(first: 1) {
                    edges {
                      node {
                        id
                      }
                    }
                  }
                }
              }
            }
          }
        }
      `,
      {
        login: '' as any,
        first: 10,
        last: null,
        after: null,
        before: null
      }
    )

    watch(
      () => table.options,
      async () => {
        if (state.mounted) {
          await loadVulnerabilityAlerts()
        }
      }
    )

    onMounted(async () => {
      root.$nextTick(async () => {
        if (root.cProfile.login === undefined) {
          root.$router.push('/login')
        }
        await loadVulnerabilityAlerts()
      })
    })

    async function loadVulnerabilityAlerts() {
      state.loading = true
      root.cLoading.on()
      try {
        const { data } = await vulnerabilityAlerts.refetch({
          login: root.cProfile.login,
          first:
            table.options.page > table.lastPage ||
            table.options.page === table.lastPage
              ? table.options.itemsPerPage
                ? table.options.itemsPerPage
                : 10
              : null,
          last:
            table.options.page < table.lastPage
              ? table.options.itemsPerPage
                ? table.options.itemsPerPage
                : 10
              : null,
          after:
            table.options.page > table.lastPage
              ? table.pageInfo.endCursor
              : null,
          before:
            table.options.page < table.lastPage
              ? table.pageInfo.startCursor
              : null
        })

        mapDataResult(data.repositoryOwner.repositories)
        state.loading = false
        root.cLoading.off()
        state.mounted = true
      } catch (error) {
        state.loading = false
        root.cLoading.off()
        root.notify(error.message, 'red', 8)
      }
    }

    /**
     * Map Result List
     *
     * @param {*} data
     */
    function mapDataResult(data) {
      table.allVunerabilityAlerts = []
      data.edges.map((e) => {
        table.allVunerabilityAlerts.push({
          ...e.node,
          vulnerabilityAlerts: e.node.vulnerabilityAlerts.edges.length > 0
        })
      })
      table.totalCount = data.totalCount
      table.pageInfo = data.pageInfo
      table.lastPage = table.options.page
    }

    return () => {
      return (
        <v-card height={'100%'}>
          <dialogComponent
            config={dialogConfigComputed.value.dialogConfig}
            onEventClose={() => {
              dialog.dialog = false
            }}
          >
            <template slot={'section'}></template>
          </dialogComponent>

          <v-card-title>Vulnerability Alerts</v-card-title>
          <v-data-table
            fixed-header={true}
            class={'ma-auto elevation-1'}
            headers={table.headers}
            {...{
              on: {
                'click:row': (item) => {
                  dialog.vulnerabilitySelected = item
                  dialog.dialog = true
                }
              }
            }}
            items={table.allVunerabilityAlerts}
            options={__sync(table.options)}
            itemsPerPage={10}
            serverItemsLength={table.totalCount}
            loading={state.loading}
            footer-props={{ 'items-per-page-options': [10, 25] }}
            scopedSlots={{
              'item.isPrivate': ({ item }) => {
                if (item.isPrivate) {
                  return (
                    <v-icon large color={'red'}>
                      fas fa-lock
                    </v-icon>
                  )
                } else {
                  return (
                    <v-icon large color={'green'}>
                      fas fa-lock-open
                    </v-icon>
                  )
                }
              },
              'item.vulnerabilityAlerts': ({ item }) => {
                if (item.vulnerabilityAlerts) {
                  return (
                    <v-icon large color={'red'}>
                      fas fa-exclamation
                    </v-icon>
                  )
                } else {
                  return (
                    <v-icon large color={'green'}>
                      fas fa-thumbs-up
                    </v-icon>
                  )
                }
              }
            }}
          ></v-data-table>
        </v-card>
      )
    }
  }
})
